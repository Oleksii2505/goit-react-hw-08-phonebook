{"version":3,"file":"static/js/931.ad31bcc4.chunk.js","mappings":"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","sources":["pages/ContactsBook.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","Redux/selectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/ContactsBook.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactsContainer = styled.section`\ndisplay: flex;\nflex-direction: row;\nalign-items: flex-start;\ngap: 50px;\nflex-wrap: nowrap;\njustify-content: center;\npadding: 50px;\n`;\n\nexport const Title = styled.h1`\ntext-transform: capitalize;\nfont-size: 35px;\n`;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilteredContacts = state => state.filter;\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilteredContacts],\n    (contacts, filter) => {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter)\n      );\n    }\n  );\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n`;\n\nexport const Item = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nexport const DeleteBtn = styled.button`\n    border-radius: 8px;\n    font-size: 14px;\n    padding: 5px 15px;\n    &:hover {\n        background-color: #1d49aa;\n        color: #fff;\n    }\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { deleteContact, fetchContacts } from 'Redux/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVisibleContacts, selectIsLoading, selectError } from 'Redux/selectors';\nimport { DeleteBtn, Item, List } from './ContactList.styled';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const filteredContacts = useSelector(selectVisibleContacts);\n    \n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    \n    const onClickDelete = contactId => {\n        dispatch(deleteContact(contactId));\n    };\n    \n    return (\n        <List>\n            {isLoading && !error && <b>Loading...</b>}\n            {filteredContacts.map(({ id, name, phone }) =>  {\n                return (\n                    <Item key={id}>\n                        {name}: {phone}{' '}\n                        <DeleteBtn\n                            type=\"button\"\n                            onClick={() => onClickDelete(id)}\n                        >\n                            Delete\n                        </DeleteBtn>\n                    </Item>\n                )}\n            )}\n        </List>\n    );\n};\n\nContactList.propTypes = {\n    filteredContacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        })\n    ),\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    margin-bottom: 15px;\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: #70B3F1;\n    }\n`;\n\nexport const Input = styled.input`\n    display: block;\n    padding: 6px 12px;\n    border-radius: 8px;\n    font-size: 18px;\n`;","import { Input, Label } from './Filter.styled';\nimport { getFilter } from 'Redux/filterSlice';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { selectFilteredContacts } from 'Redux/selectors';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilteredContacts)\n    return (\n        <Label>\n            Find contact by name\n            <Input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Enter contact name\"\n                value={filter}\n                onChange={(e) => dispatch(getFilter(e.target.value))}\n                pattern=\"^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$\"\n            />\n        </Label>\n    );\n};\n\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    padding-bottom: 30px;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    font-size: 24px;\n    &:hover,\n    &:focus {\n        color: #70B3F1;\n    }\n    &:nth-of-type(2) {\n        margin-bottom: 25px;\n    }\n`;\n\nexport const Input = styled.input`\n    display: block;\n    margin: 0;\n    padding: 6px 12px;\n    border-radius: 8px;\n    font-size: 16px;\n`;\n\nexport const SubmitBtn = styled.button`\nwidth: 150px;\nappearance: none;\nborder: 0;\nborder-radius: 8px;\nbackground: #4676D7;\ncolor: #fff;\npadding: 8px 16px;\nfont-size: 14px;\ntext-transform: capitalize;\n:hover,\n:focus {\n    background: #1d49aa;\n    outline: none;\n    box-shadow: 0 0 0 2px #051BB8;\n}\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Label, Input, SubmitBtn } from './ContactForm.styled';\nimport { addContact } from 'Redux/operations';\nimport { selectContacts } from 'Redux/selectors';\n\nconst ContactForm = () => {\n    const [name, setName] = useState('');\n    const [phone, setPhone] = useState('');\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts)\n\n    const onFormSubmit = e => {\n        e.preventDefault();\n        const contact = Array.isArray(contacts) && contacts.find(\n          (c) =>\n            c.name.toLowerCase() === name.toLowerCase() ||\n            c.phone.toLowerCase() === phone.toLowerCase()\n        );\n        if (contact) {\n          if (contact.name.toLowerCase() === name.toLowerCase()) {\n            return alert(`${name} is already in contact`);\n          } else if (contact.phone.toLowerCase() === phone.toLowerCase()) {\n            return alert(`${phone} is already in contact`);\n          }\n        };\n        dispatch(\n          addContact({\n            name: name,\n            number: phone,\n          })\n        );\n        resetForm();\n      };\n\n      const resetForm = () => {\n        setName('');\n        setPhone('');\n      };\n    \n    const onInputChange = e => {\n        const { name, value } = e.target;\n        switch (name) {\n          case 'name':\n            setName(value);\n            break;\n          case 'number':\n            setPhone(value);\n            break;\n    \n          default:\n            break;\n        }\n      };\n\n    return (\n        <Form onSubmit={onFormSubmit}>\n            <Label>\n                Name\n                <Input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    placeholder=\"Enter contact name\"\n                    onChange={onInputChange}\n                    value={name}\n                />\n            </Label>\n            <Label>\n            Number\n                <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    placeholder=\"Enter contact number\"\n                    onChange={onInputChange}\n                    value={phone}\n                />\n            </Label>\n            <SubmitBtn type=\"submit\">Add contact</SubmitBtn>\n        </Form>\n    );\n};\n\nexport default ContactForm;","import { ContactsContainer, Title } from './ContactsBook.styled';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { useAuth } from 'hooks';\nimport { selectError } from 'Redux/selectors';\nimport { fetchContacts } from 'Redux/operations';\n// import Loader from 'components/Loader';\n\nconst ContactsBook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useAuth();\n  const error = useSelector(selectError);\n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n  return (\n    <ContactsContainer>\n      <ContactForm />\n      <Title>Contacts</Title>     \n        <Filter />\n        {/* {isLoading  && <Loader/>}\n        {error && <h2>{error}</h2>} */}\n         {isLoading && !error && (\n          <b>Request in progress...</b>\n        )}\n\n\n        <ContactList />\n      \n    </ContactsContainer>\n  );\n};\n\nexport default ContactsBook;"],"names":["ContactsContainer","styled","Title","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","filter","selectVisibleContacts","contact","toLowerCase","includes","List","Item","DeleteBtn","dispatch","useDispatch","useSelector","filteredContacts","useEffect","fetchContacts","id","phone","type","onClick","contactId","deleteContact","Label","Input","Filter","placeholder","onChange","e","getFilter","target","pattern","Form","SubmitBtn","useState","setName","setPhone","resetForm","onInputChange","onSubmit","preventDefault","c","alert","addContact","number","title","required","useAuth"],"sourceRoot":""}